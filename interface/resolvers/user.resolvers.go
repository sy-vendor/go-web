package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"errors"
	"fmt"

	"go-web/ent"
	"go-web/ent/user"
)

// UpdatePasswordByAccount is the resolver for the updatePasswordByAccount field.
func (r *mutationResolver) UpdatePasswordByAccount(ctx context.Context, account string, password string) (bool, error) {
	// 验证账号是否存在
	_, err := r.client.User.Query().Where(user.Account(account)).First(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return false, fmt.Errorf("user with account %s not found", account)
		}
		return false, fmt.Errorf("failed to query user: %w", err)
	}

	// 验证密码是否为空
	if password == "" {
		return false, errors.New("password cannot be empty")
	}

	// 更新密码
	if err := r.client.User.Update().Where(user.Account(account)).SetPassword(password).Exec(ctx); err != nil {
		return false, fmt.Errorf("failed to update password: %w", err)
	}

	return true, nil
}

// UserByAccount is the resolver for the userByAccount field.
func (r *queryResolver) UserByAccount(ctx context.Context, account string) (*ent.User, error) {
	// 验证账号是否为空
	if account == "" {
		return nil, errors.New("account cannot be empty")
	}

	// 查询用户
	u, err := r.client.User.Query().Where(user.Account(account)).First(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, fmt.Errorf("user with account %s not found", account)
		}
		return nil, fmt.Errorf("failed to query user: %w", err)
	}

	return u, nil
}
